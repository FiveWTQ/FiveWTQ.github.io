<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>qt中QMessageBox自动关闭</title>
      <link href="/2020/06/29/qt-zhong-qmessagebox-zi-dong-guan-bi/"/>
      <url>/2020/06/29/qt-zhong-qmessagebox-zi-dong-guan-bi/</url>
      
        <content type="html"><![CDATA[<p>个人博客地址:<a href="http://wtqdreamer.top">http://wtqdreamer.top</a></p><h2 id="QMessageBox自动关闭"><a href="#QMessageBox自动关闭" class="headerlink" title="QMessageBox自动关闭"></a>QMessageBox自动关闭</h2><p>.h</p><pre><code>QMessageBox* box;</code></pre><p>.c</p><pre><code>    box = new QMessageBox(this);    box-&gt;setIcon(QMessageBox::Information);    box-&gt;setText(&quot;创建新文件&quot;);    box-&gt;setWindowTitle(&quot;warning&quot;);    box-&gt;setStandardButtons(QMessageBox::Ok);    //3秒后自动关闭    box-&gt;button(QMessageBox::Ok)-&gt;animateClick(3 * 1000);    box-&gt;exec();</code></pre>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QMessageBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt基本控件使用</title>
      <link href="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/"/>
      <url>/2020/06/22/qt-ji-ben-kong-jian-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>个人博客地址:<a href="http://wtqdreamer.top">http://wtqdreamer.top</a></p><p>初步效果：<img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/1.png" alt></p><h2 id="QPushButton使用"><a href="#QPushButton使用" class="headerlink" title="QPushButton使用"></a>QPushButton使用</h2><pre><code>/********QPushButton使用**********/    btn_set = new QPushButton(&quot;开始&quot;,this);    btn_set-&gt;setGeometry(QRect(10, 10, 50, 30));    connect(btn_set, SIGNAL(clicked()), this, SLOT(btn_text()));</code></pre><h2 id="QLabel使用"><a href="#QLabel使用" class="headerlink" title="QLabel使用"></a>QLabel使用</h2><pre><code>    /********QLabel使用**********/    label_set = new QLabel(&quot;LABEL&quot;, this);    label_set-&gt;setGeometry(QRect(60, 10, 70, 30));    //设置label样式    //font-size字体大小、color字体颜色、font-weight字宽、font-style字体样式    label_set-&gt;setStyleSheet(&quot;font-size:20px;color:red;font-weight:bold;font-style:italic&quot;);</code></pre><h2 id="QLineEdit使用"><a href="#QLineEdit使用" class="headerlink" title="QLineEdit使用"></a>QLineEdit使用</h2><pre><code>    /********QLineEdit使用**********/    lineedit_set = new QLineEdit(this);    lineedit_set-&gt;setGeometry(QRect(140, 10, 70, 30));    //样式使用    //border边框线大小、border-style边框样式solid实线、border-color:blue red 上下蓝色     //左右红色    lineedit_set-&gt;setStyleSheet(&quot;border:10px;border-style:solid;color:red;border-color:blue red;&quot;);    //限制最长输入6位    lineedit_set-&gt;setMaxLength(6);    lineedit_set-&gt;setText(&quot;12345&quot;);//设置显示    //lineedit_set-&gt;setEchoMode(QLineEdit::NoEcho);//不可显示，可以输入但是不会显示出来</code></pre><h2 id="QTextEdit使用"><a href="#QTextEdit使用" class="headerlink" title="QTextEdit使用"></a>QTextEdit使用</h2><pre><code>    /********QTextEdit使用**********/    textedit_set = new QTextEdit(this);    textedit_set -&gt; setGeometry(QRect(220, 10, 70, 50));    textedit_set-&gt;setText(&quot;第一行&lt;br/&gt;第二行&quot;);</code></pre><h2 id="QPlainTextEdit使用"><a href="#QPlainTextEdit使用" class="headerlink" title="QPlainTextEdit使用"></a>QPlainTextEdit使用</h2><pre><code>    /********QPlainTextEdit使用**********/    //QPlainTextEdit 可以理解为 QTextEdit的低配版。QPlainTextEdit支持纯文本显示，QTextEdit支持富文本显示。就是多一个样式。    //QPlainTextEdit显示的效率比QTextEdit高，如果需要显示大量文字，尤其是需要滚动条来回滚动的时候，QPlainTextEdit要好很多。    plaintextedit_set = new QPlainTextEdit(this);    plaintextedit_set-&gt;setGeometry(QRect(300, 10, 100, 50));    plaintextedit_set-&gt;setPlainText(&quot;第一行\n第二行&quot;);</code></pre><h2 id="QComboBox使用"><a href="#QComboBox使用" class="headerlink" title="QComboBox使用"></a>QComboBox使用</h2><pre><code>/********QComboBox使用**********/    combobox_set = new QComboBox(this);    combobox_set-&gt;setGeometry(QRect(300, 110, 100, 50));    //定义字符串列表    QStringList str;    str &lt;&lt; &quot;1&quot; &lt;&lt;&quot;2&quot;  &lt;&lt; &quot;3&quot;;    combobox_set-&gt;addItems(str);    //另一种带图标的方式    //QIcon   icon;    //icon.addFile(&quot;:/images/xxx.ico&quot;);    combobox_set-&gt;clear(); //清除列表    for (int i = 0; i &lt; 20; i++)        //ui-&gt;comboBox-&gt;addItem(icon, QString::asprintf(&quot;Item %d&quot;, i)); //带图标        combobox_set-&gt;addItem(QString::asprintf(&quot;Item %d&quot;,i)); //不带图标    combobox_set-&gt;clear();    //添加具有用户数据的项    //QMap自动根据 key排序    //这里定义了一个关联容器类 QMap&lt;QString，int&gt; City_Zone，用于存储&lt;城市，区号&gt;映射表。为 City_Zone 填充数据后，给 comboBox2 添加项时，使用了 foreach 关键字遍历 City_Zone.keys()    //城市名称作为项显示的字符串，电话区号作为项关联的用户数据，但是在列表框里只能看到城市名称。    //需要注意的是，将 City_Zone 的内容添加到列表框之后，列表框里显示的列表项的顺序与源程序中设置 City_Zone 的顺序不一致，因为 QMap&lt;Key, T&gt; 容器类会自动按照 Key 排序,元素根据key值大小排序    QMap&lt;QString, int&gt; City_Zone;    City_Zone.insert(&quot;北京&quot;, 10);    City_Zone.insert(&quot;上海&quot;, 21);    City_Zone.insert(&quot;天津&quot;, 22);    City_Zone.insert(&quot;大连&quot;, 411);    City_Zone.insert(&quot;锦州&quot;, 416);    City_Zone.insert(&quot;徐州&quot;, 516);    City_Zone.insert(&quot;福州&quot;, 591);    City_Zone.insert(&quot;青岛&quot;, 532);    foreach(const QString &amp; str, City_Zone.keys())        combobox_set-&gt;addItem(str, City_Zone.value(str));</code></pre><h3 id="访问combobox"><a href="#访问combobox" class="headerlink" title="访问combobox"></a>访问combobox</h3><p>QComboBox列表项的访问<br>QComboBox 存储的项是一个列表，但是 QComboBox 不提供整个列表用于访问，可以通过索引访问某个项。访问项的一些函数主要有以下几种：<br><code>int currentlndex()：返回当前项的序号，第一个项的序号为0。</code>QString currentText()：返回当前项的文字。<br><code>QVariant currentData(int role = Qt::UserRole)：返回当前项的关联数据，数据的缺省角色为 role = Qt::UserRole，角色的意义在后续章节会详细介绍。</code>QString itemText(int index)：返回指定索引号的项的文字。<br><code>QVariant itemData(int index, int role = Qt%:UserRole)：返回指定索引号的项的关联数据。</code>int count()：返回项的个数。<br>在一个 QComboBox 组件上选择项发生变化时，会发射如下两个信号:</p><pre><code>void currentlndexChanged(int index)//当前ComboBox中的CurrentIndex改变时，不管是交互式还是通过程序改变选项，都会产生一个改变值得消息信号，如果ComboBox为空或重置当前ComboBox，产生的消息值返回-1void currentlndexChanged(const QString &amp;text)//传送的是选中Item的ItemName</code></pre><p>添加一个响应槽函数void on_combobox_set(QString arg);</p><pre><code>connect(combobox_set, SIGNAL(currentIndexChanged(QString)), this, SLOT(on_combobox_set(QString)));void Test::on_combobox_set(QString arg){    //仅显示项    btn_set-&gt;setText(arg);    //显示项关联的数据    //QString zone = combobox_set-&gt;currentData().toString();//项关联的数据    //btn_set-&gt;setText(arg + &quot;:区号=&quot; + zone);}</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/2.png" alt><br><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/3.png" alt></p><h2 id="QFontComboBox-字体下拉列表框"><a href="#QFontComboBox-字体下拉列表框" class="headerlink" title="QFontComboBox 字体下拉列表框"></a>QFontComboBox 字体下拉列表框</h2><pre><code>    connect(btn_set, SIGNAL(released()), this, SLOT(btn_text()));</code></pre><pre><code>void Test::btn_text(){    QString arg;    arg = ui.fontcombobox-&gt;currentText();    btn_set-&gt;setText(arg);    }</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/4.png" alt></p><h2 id="QSpinBox和QDoubleSpinBox-控件"><a href="#QSpinBox和QDoubleSpinBox-控件" class="headerlink" title="QSpinBox和QDoubleSpinBox 控件"></a>QSpinBox和QDoubleSpinBox 控件</h2><p>QSpinBox旨在处理整数和离散值集（例如，月份名称）<br>使用QDoubleSpinBox作为浮点值。<br>QSpinBox允许用户通过单击上/下按钮或按键盘上的上/下按钮来选择/选择一个值，以增加/减少当前显示的值。用户也可以手动输入值。旋转框支持整数值但可以扩展为使用带有validate（），textFromValue（）和valueFromText（）的不同字符串。<br>每次值更改时，QSpinBox都会发出valueChanged（）和textChanged（）信号，前者提供一个int，后者提供一个QString。在textChanged() 信号提供的值与两个前缀prefix() 和suffix()后缀。可以使用value（）获取当前值，并使用setValue（）进行设置<br>单击向上/向下按钮或使用键盘加速器的向上和向下箭头将以singleStep（）大小为步长来增大或减小当前值。如果要更改此行为，可以重新实现虚拟功能stepBy（）。可以使用构造函数之一来设置最小值和最大值以及步长，以后可以使用setMinimum（），setMaximum（）和setSingleStep（）对其进行更改</p><pre><code>//值的范围    ui.spinbox-&gt;setRange(0, 10);    //设置初始值    ui.spinbox-&gt;setValue(1);    //设置后缀    ui.spinbox-&gt;setSuffix(&quot;元&quot;);    //设置前缀    ui.spinbox-&gt;setPrefix(&quot;$&quot;);    //设置步进值    ui.spinbox-&gt;setSingleStep(1);    ui.spinbox-&gt;setMinimum()        #设定最大值    ui.spinbox-&gt;setMaximum()        #设定最小值    ui.spinbox-&gt;setRange(min,max)   #设定范围    ui.spinbox-&gt;maximum()           #获取最大值    ui.spinbox-&gt;minimum()           #获取最小值    ui.spinbox-&gt;setWrapping(True)        #启用数值循环    ui.spinbox-&gt;wrapping()               #是否启用数值循环</code></pre><h2 id="QTimeEdit-时间控件"><a href="#QTimeEdit-时间控件" class="headerlink" title="QTimeEdit 时间控件"></a>QTimeEdit 时间控件</h2><pre><code>timeedit = new QTimeEdit(this);    timeedit-&gt;setGeometry(QRect(100, 100, 100, 30));    //设置显示格式    timeedit-&gt;setDisplayFormat(&quot;yyyy/MM/dd hh:mm:ss&quot;);    //获取当前系统时间默认只有时分    QDateTime systime = QDateTime::currentDateTime();    //获取时分秒并以&#39;:&#39;进行拆分存入list数组    QStringList arg = systime.toString(&quot;hh:mm:ss&quot;).split(&#39;:&#39;);    //将时分秒显示到控件timeedit-&gt;setTime(QTime(arg[0].toInt(),arg[1].toInt(),arg[2].toInt()));</code></pre><p>setMinimumTime（const QTime＆ min）设置最小时间<br>setMaximumTime（const QTime＆ max）设置最大时间</p><h2 id="QDateEdit-日期控件"><a href="#QDateEdit-日期控件" class="headerlink" title="QDateEdit 日期控件"></a>QDateEdit 日期控件</h2><p>日期控件与时间控件差不多</p><pre><code>//获取系统时间QDateTime sysTime = QDateTime::currentDateTime();//获取时分秒以“-”号拆分赋予 list 数组QStringList list = sysTime.toString(&quot;yyyy-MM-dd&quot;).split(&#39;-&#39;);//将年月日绑定控件dateEdit-&gt;setDate(QDate(list[0].toInt(),list[1].toInt(),list[2].toInt()));</code></pre><p>同样可以使用setDisplayFormat设置日期格式<br>最大最小日期也一样</p><h2 id="QScrollBar-滚动条控件"><a href="#QScrollBar-滚动条控件" class="headerlink" title="QScrollBar 滚动条控件"></a>QScrollBar 滚动条控件</h2><pre><code>scrollBar = new QScrollBar(this);    spinBox = new QSpinBox(this);    //横显/竖显    scrollBar-&gt;setOrientation(Qt::Horizontal);    //位置    scrollBar-&gt;setGeometry(QRect(50, 50, 180, 20));    spinBox-&gt;setGeometry(QRect(50, 90, 100, 25));    //控制条宽度    scrollBar-&gt;setPageStep(10);    //scrollBar 事件    connect(scrollBar, SIGNAL(valueChanged(int)), spinBox, SLOT(setValue(int)));    //spinBox 事件    connect(spinBox, SIGNAL(valueChanged(int)), scrollBar, SLOT(setValue(int)));    //初始值    scrollBar-&gt;setValue(50);</code></pre><h2 id="QRadioButton-单选按钮"><a href="#QRadioButton-单选按钮" class="headerlink" title="QRadioButton 单选按钮"></a>QRadioButton 单选按钮</h2><pre><code>    radiobtnA = new QRadioButton(this);    radiobtnB = new QRadioButton(this);    radiobtnA-&gt;setGeometry(100, 100, 50, 50);    radiobtnB-&gt;setGeometry(200, 200, 50, 50);    radiobtnA-&gt;setText(&quot;A&quot;);    radiobtnB-&gt;setText(&quot;B&quot;);    radiobtnA-&gt;setChecked(true);//默认选择，当qt界面出现多个radiobtn时默认只能选择一个    connect(radiobtnA, SIGNAL(clicked()), this, SLOT(btn_text()));    connect(radiobtnB, SIGNAL(clicked()), this, SLOT(btn_text()));</code></pre><pre><code>void Test::btn_text(){    if (sender()==radiobtnA)    {        btn_set-&gt;setText(&quot;这是A&quot;);    }    else if (sender() == radiobtnB)    {        btn_set-&gt;setText(&quot;这是B&quot;);    }    }</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/5.png" alt></p><h2 id="QCheckBox-复选框"><a href="#QCheckBox-复选框" class="headerlink" title="QCheckBox 复选框"></a>QCheckBox 复选框</h2><p>.h</p><pre><code>#include&lt;QCheckBox&gt;private:    QCheckBox* checkbox1;    QCheckBox* checkbox2;    QCheckBox* checkbox3;private slots:    void change_checkbox_text();</code></pre><p>.c</p><pre><code>checkbox1 = new QCheckBox(this);    checkbox2 = new QCheckBox(this);    checkbox3 = new QCheckBox(this);    checkbox1-&gt;setGeometry(QRect(100, 50, 100, 30));    checkbox2-&gt;setGeometry(QRect(100, 150, 100, 30));    checkbox3-&gt;setGeometry(QRect(100, 250, 100, 30));    checkbox1-&gt;setText(&quot;A&quot;);    checkbox2-&gt;setText(&quot;B&quot;);    checkbox3-&gt;setText(&quot;C&quot;);    connect(checkbox1, SIGNAL(clicked(bool)), this, SLOT(change_checkbox_text()));    connect(checkbox2, SIGNAL(clicked(bool)), this, SLOT(change_checkbox_text()));    connect(checkbox3, SIGNAL(clicked(bool)), this, SLOT(change_checkbox_text()));void Test::change_checkbox_text(){    QString str;    //判断复选框的状态    if (sender()== checkbox1)    {        if (checkbox1-&gt;checkState() == Qt::Checked)        {            str += &quot;AA&quot;;        }        else        {            str = str.replace(QString(&quot;AA&quot;), QString(&quot;&quot;));        }    }    else if (sender()==checkbox2)    {        if (checkbox2-&gt;checkState() == Qt::Checked)        {            str += &quot;BB&quot;;        }        else        {            str = str.replace(QString(&quot;BB&quot;), QString(&quot;&quot;));        }    }    else if (sender()==checkbox3)    {        if (checkbox3-&gt;checkState() == Qt::Checked)        {            str += &quot;CC&quot;;        }        else        {            str = str.replace(QString(&quot;CC&quot;), QString(&quot;&quot;));        }    }    //显示不同值    btn_set-&gt;setText(str);}</code></pre><h2 id="QListView-列表控件"><a href="#QListView-列表控件" class="headerlink" title="QListView 列表控件"></a>QListView 列表控件</h2><p>QListView可以用来以列表的形式展示数据，在Qt中使用model/View结构来管理数据与视图的关系，model负责数据的存取.<br>QT提供了一些现成的models用于处理数据项：<br>QStringListModel 用于存储简单的QString列表。<br>QStandardItemModel 管理复杂的树型结构数据项，每项都可以包含任意数据。<br>QDirModel 提供本地文件系统中的文件与目录信息。<br>QSqlQueryModel, QSqlTableModel,QSqlRelationTableModel用来访问数据库<br>下面为一个简单例子：<br>.H</p><pre><code>#include &lt;QListView&gt; //QListView 类#include &lt;QStringListModel&gt; //数据模型类private:    QListView* listview;    QStringListModel* model;private slots:    void btn_text();//获取某项值    void show_model(QModelIndex index);//点击某项时显示值</code></pre><p>.C</p><pre><code>listview = new QListView(this);    listview-&gt;setGeometry(QRect(100, 100, 100, 50));    QStringList str;    str &lt;&lt; &quot;1&quot; &lt;&lt; &quot;2&quot; &lt;&lt; &quot;3&quot;;    model = new QStringListModel(str);    listview-&gt;setModel(model);    connect(listview, SIGNAL(clicked(QModelIndex)), this, SLOT(show_model(QModelIndex)));void Test::btn_text(){    //index（）代表几行几列    QString str = listview-&gt;model()-&gt;index(1, 0).data().toString();    btn_set-&gt;setText(str);    }void Test::show_model(QModelIndex index){    QString str = index.data().toString();    btn_set-&gt;setText(str);}</code></pre><p>如图:<br><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/6.PNG" alt></p><h2 id="QTreeView-树控件"><a href="#QTreeView-树控件" class="headerlink" title="QTreeView 树控件"></a>QTreeView 树控件</h2><p>简单应用:<br>.h文件</p><pre><code>#include &lt;QTreeView&gt;#include &lt;QStandardItemModel&gt;private:    QTreeView* treeview;    QStandardItemModel* standard_item_model;private slots:    void show_model(QModelIndex index);</code></pre><p>.c文件</p><pre><code>treeview = new QTreeView(this);    treeview-&gt;setGeometry(QRect(100, 100, 300, 300));    //实例数据类型 4 个节点，2 列    standard_item_model = new QStandardItemModel(3, 2);    //列名称    standard_item_model-&gt;setHeaderData(0, Qt::Horizontal, &quot;序号&quot;);    standard_item_model-&gt;setHeaderData(1, Qt::Horizontal, &quot;列表说明&quot;);    //定义节点    QStandardItem* item1 = new QStandardItem(&quot;A&quot;);    item1-&gt;setIcon(QIcon(&quot;:/Test/7.png&quot;));    QStandardItem* item2 = new QStandardItem(&quot;B&quot;);    item2-&gt;setIcon(QIcon(&quot;:/Test/7.png&quot;));    QStandardItem* item3 = new QStandardItem(&quot;C&quot;);    item3-&gt;setIcon(QIcon(&quot;:/Test/7.png&quot;));    QStandardItem* item4 = new QStandardItem(&quot;D&quot;);    item4-&gt;setIcon(QIcon(&quot;:/Test/7.png&quot;));    item3-&gt;appendRow(item4);    item3-&gt;setChild(0, 1, new QStandardItem(QString(&quot;子节点使用&quot;)));    //将节点添加至 QStandardItemModel    standard_item_model-&gt;setItem(0, 0, item1);    standard_item_model-&gt;setItem(1, 0, item2);    standard_item_model-&gt;setItem(2, 0, item3);    standard_item_model-&gt;setItem(0, 1, new QStandardItem(QString(&quot;信息说明&quot;)));    //将 QStandardItemModel 数据绑定 QTreeView 控件    treeview-&gt;setModel(standard_item_model);    connect(treeview, SIGNAL(clicked(QModelIndex)), this, SLOT(show_model(QModelIndex)));void Test::show_model(QModelIndex index){    QString str;    str += QString(&quot;当前选中：%1\nrow:%2,column:%3\n&quot;).arg(index.data().toString())        .arg(index.row()).arg(index.column());    str += QString(&quot;父级：%1\n&quot;).arg(index.parent().data().toString());    label_set-&gt;setText(str);}</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/7.png" alt></p><pre><code>    for (int i = 0; i &lt; 5; ++i) {        QStandardItem* itemgroup = new QStandardItem(QString(&quot;组%1&quot;).arg(i + 1));        item3-&gt;appendRow(itemgroup);        for (int j = 0; j &lt; (i + 1); ++j) {            QStandardItem* itemchannel = new QStandardItem(QString(&quot;频道%1&quot;).arg(j + 1));            itemgroup-&gt;appendRow(itemchannel);            itemgroup-&gt;setChild(itemchannel-&gt;index().row(), 1, new QStandardItem(QString(&quot;频道%1信息说明&quot;).arg(j + 1)));        }    }</code></pre><p>在setModel前添加则可以<br><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/8.png" alt></p><h2 id="QTableView-表格控件"><a href="#QTableView-表格控件" class="headerlink" title="QTableView 表格控件"></a>QTableView 表格控件</h2><p>.h文件</p><pre><code>#include &lt;QStandardItemModel&gt;#include &lt;QTableView&gt;private:    QStandardItemModel* standard_item_model;    QTableView* tableview;</code></pre><p>.c文件</p><pre><code>    tableview = new QTableView(this);    tableview-&gt;setGeometry(QRect(200, 100, 500, 300));    standard_item_model = new QStandardItemModel();    //定义列    standard_item_model-&gt;setHorizontalHeaderItem(0, new QStandardItem(&quot;姓名&quot;));    standard_item_model-&gt;setHorizontalHeaderItem(1, new QStandardItem(&quot;性别&quot;));    standard_item_model-&gt;setHorizontalHeaderItem(2, new QStandardItem(&quot;编号&quot;));    //定义行列数据(行号，列号)    standard_item_model-&gt;setItem(0, 0, new QStandardItem(&quot;张三&quot;));    standard_item_model-&gt;setItem(1, 0, new QStandardItem(&quot;李四&quot;));    standard_item_model-&gt;setItem(2, 0, new QStandardItem(&quot;麻五&quot;));    //定义行列数据    standard_item_model-&gt;setItem(0, 2, new QStandardItem(&quot;001&quot;));    standard_item_model-&gt;setItem(1, 2, new QStandardItem(&quot;002&quot;));    standard_item_model-&gt;setItem(2, 2, new QStandardItem(&quot;003&quot;));    //将数据模型绑定控件    tableview-&gt;setModel(standard_item_model);</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/10.png" alt></p><h2 id="QHBoxLayout-横向布局"><a href="#QHBoxLayout-横向布局" class="headerlink" title="QHBoxLayout 横向布局"></a>QHBoxLayout 横向布局</h2><p>.h</p><pre><code>#include &lt;QHBoxLayout&gt;#include &lt;QWidget&gt;#include&lt;QCheckBox&gt;private:    QCheckBox* checkbox1;    QCheckBox* checkbox2;    QCheckBox* checkbox3;    QHBoxLayout* hboxlayout;    QWidget* widget;</code></pre><p>.c</p><pre><code>    //创建布局及复选框控件    hboxlayout = new QHBoxLayout();    checkbox1 = new QCheckBox(&quot;A&quot;);    checkbox2 = new QCheckBox(&quot;B&quot;);    checkbox3 = new QCheckBox(&quot;C&quot;);    //将复选框控件添加到布局中    hboxlayout-&gt;addWidget(checkbox1);    hboxlayout-&gt;addWidget(checkbox2);    hboxlayout-&gt;addWidget(checkbox3);    hboxlayout-&gt;setSpacing(100);    //创建个widget并添加布局    widget = new QWidget();    widget-&gt;setLayout(hboxlayout);    //设置为中心窗口部件    this-&gt;setCentralWidget(widget);</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/11.png" alt></p><h2 id="QGridLayout-网格布局"><a href="#QGridLayout-网格布局" class="headerlink" title="QGridLayout 网格布局"></a>QGridLayout 网格布局</h2><p>.h文件</p><pre><code>#include &lt;QWidget&gt;#include &lt;QGridLayout&gt;#include&lt;QPushButton&gt;private:    QPushButton* btn_set;//声明按钮    QPushButton* btn_set1;    QPushButton* btn_set2;    QPushButton* btn_set3;    QWidget* widget;    QGridLayout* gridlayout;</code></pre><p>.c文件</p><pre><code>//创建布局及按钮控件    gridlayout = new QGridLayout();    btn_set = new QPushButton(&quot;A&quot;);    btn_set1 = new QPushButton(&quot;B&quot;);    btn_set2 = new QPushButton(&quot;C&quot;);    btn_set3 = new QPushButton(&quot;D&quot;);    //设置组件大小可扩展    btn_set-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);    btn_set1-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);    btn_set2-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);    btn_set3-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);    //将按钮控件添加到布局中    gridlayout-&gt;addWidget(btn_set, 0, 0, 2, 1);//0,0位置2,1占用几行几列    gridlayout-&gt;addWidget(btn_set1, 0, 1, 2, 1);    gridlayout-&gt;addWidget(btn_set2, 3, 0, 1, 2);    gridlayout-&gt;addWidget(btn_set3, 3, 1, 1, 2);    //设置水平垂直间隔    gridlayout-&gt;setSpacing(10);    //gridlayout-&gt;setHorizontalSpacing(10);//单独设置水平间隔    //gridlayout-&gt;setVerticalSpacing(10);//单独设置垂直间隔    //设置外间隔    gridlayout-&gt;setContentsMargins(10, 10, 10, 10);    //创建个widget并添加布局    widget = new QWidget();    widget-&gt;setLayout(gridlayout);    //设置为中心窗口部件    this-&gt;setCentralWidget(widget);</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/12.png" alt></p><h2 id="QGroupBox-控件"><a href="#QGroupBox-控件" class="headerlink" title="QGroupBox 控件"></a>QGroupBox 控件</h2><p>.h文件</p><pre><code>#include &lt;QGroupBox&gt;#include &lt;QVBoxLayout&gt;#include&lt;QPushButton&gt;private:    QPushButton* btn_set;//声明按钮    QPushButton* btn_set1;    QPushButton* btn_set2;    QPushButton* btn_set3;    QGroupBox* groupbox;    QVBoxLayout* vboxlayout;</code></pre><p>.c文件</p><pre><code>    //创建布局、按钮控件、控件组    vboxlayout = new QVBoxLayout();    groupbox = new QGroupBox(this);    btn_set = new QPushButton(&quot;A&quot;);    btn_set1 = new QPushButton(&quot;B&quot;);    btn_set2 = new QPushButton(&quot;C&quot;);    btn_set3 = new QPushButton(&quot;D&quot;);    //位置    groupbox-&gt;setGeometry(QRect(100, 100, 300, 300));    //名字    groupbox-&gt;setTitle(&quot;test&quot;);    //将控件添加到布局    vboxlayout-&gt;addWidget(btn_set);    vboxlayout-&gt;addWidget(btn_set1);    vboxlayout-&gt;addWidget(btn_set2);    vboxlayout-&gt;addWidget(btn_set3);    //给组设置布局    groupbox-&gt;setLayout(vboxlayout);</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/13.png" alt></p><h2 id="QTabWidget-控件"><a href="#QTabWidget-控件" class="headerlink" title="QTabWidget 控件"></a>QTabWidget 控件</h2><p>.h文件</p><pre><code>#include&lt;QTabWidget&gt;private:    QTabWidget* tabwidget;//新建tabA类class tabA:public QWidget{    Q_OBJECTpublic:    tabA(QWidget *parent=0);private:};//新建tabB类class tabB :public QWidget{    Q_OBJECTpublic:    tabB(QWidget* parent = 0);private:};</code></pre><p>.c文件</p><pre><code>    tabwidget = new QTabWidget(this);    tabwidget-&gt;setGeometry(QRect(30, 30, 400, 200));    tabwidget-&gt;addTab(new tabA, &quot;A页面&quot;);    tabwidget-&gt;addTab(new tabB, &quot;B页面&quot;);//新建类主体tabA::tabA(QWidget* parent) :QWidget(parent){    QPushButton* buttonA = new QPushButton(this);    buttonA-&gt;setText(&quot;页面A&quot;);}tabB::tabB(QWidget* parent) : QWidget(parent){    QPushButton* buttonB = new QPushButton(this);    buttonB-&gt;setText(&quot;页面B&quot;);}</code></pre><h2 id="QMenu、QToolBar-控件"><a href="#QMenu、QToolBar-控件" class="headerlink" title="QMenu、QToolBar 控件"></a>QMenu、QToolBar 控件</h2><p>对于Action动作可以添加到菜单也可以添加到工具条<br>.h文件</p><pre><code>#include &lt;QMenu&gt;#include &lt;QMenuBar&gt;#include &lt;QAction&gt;#include &lt;QToolBar&gt;private:    QMenu* fileMenu, * editMenu, * helpMenu;//三个菜单    QToolBar* fileToolBar, * editToolBar;//两个工具条    QAction* newAct, * cutAct, * copyAct, *pasteAct, * aboutQtAct;//五个动作private slots:    void newFile();//点击新建后触发的槽</code></pre><p>.c文件</p><pre><code>//实例菜单    fileMenu = new QMenu(this);    editMenu = new QMenu(this);    helpMenu = new QMenu(this);    //填充菜单子节点关于Action动作相关设置    newAct = new QAction(tr(&quot;新建&quot;), this);    //设置显示提示快捷键    newAct-&gt;setShortcut(tr(&quot;Ctrl+N&quot;));    //在窗口底部提示信息    newAct-&gt;setStatusTip(tr(&quot;新建文件&quot;));    //点击新建触发槽    connect(newAct, SIGNAL(triggered()), this, SLOT(newFile()));    cutAct = new QAction(tr(&quot;剪切&quot;), this);    cutAct-&gt;setShortcut(tr(&quot;Ctrl+X&quot;));    cutAct-&gt;setStatusTip(tr(&quot;剪切内容&quot;));    copyAct = new QAction(tr(&quot;复制&quot;), this);    copyAct-&gt;setShortcut(tr(&quot;Ctrl+C&quot;));    copyAct-&gt;setStatusTip(tr(&quot;复制内容&quot;));    pasteAct = new QAction(tr(&quot;粘贴&quot;), this);    pasteAct-&gt;setShortcut(tr(&quot;Ctrl+V&quot;));    pasteAct-&gt;setStatusTip(tr(&quot;粘贴内容&quot;));    aboutQtAct = new QAction(tr(&quot;关于Qt&quot;), this);    aboutQtAct-&gt;setStatusTip(tr(&quot;关于Qt信息&quot;));    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));    //填充菜单    fileMenu = menuBar()-&gt;addMenu(tr(&quot;文件&quot;));    fileMenu-&gt;addAction(newAct);    fileMenu-&gt;addSeparator();    editMenu = menuBar()-&gt;addMenu(tr(&quot;编辑&quot;));    editMenu-&gt;addAction(cutAct);    editMenu-&gt;addAction(copyAct);    editMenu-&gt;addAction(pasteAct);    menuBar()-&gt;addSeparator();    helpMenu = menuBar()-&gt;addMenu(tr(&quot;帮助&quot;));    helpMenu-&gt;addAction(aboutQtAct);    //toolbar工具条    fileToolBar = addToolBar(tr(&quot;新建&quot;));    fileToolBar-&gt;addAction(newAct);    editToolBar = addToolBar(tr(&quot;修改&quot;));    editToolBar-&gt;addAction(cutAct);    editToolBar-&gt;addAction(copyAct);    editToolBar-&gt;addAction(pasteAct);void Test::newFile(){    QMessageBox::warning(this, tr(&quot;Warning&quot;),        tr(&quot;创建新文件？&quot;),        QMessageBox::Yes | QMessageBox::Default,        QMessageBox::No);}</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/15.png" alt></p><h2 id="qt任务栏托盘菜单"><a href="#qt任务栏托盘菜单" class="headerlink" title="qt任务栏托盘菜单"></a>qt任务栏托盘菜单</h2><p>功能最小化到系统托盘，点击关闭关闭窗口，但是系统托盘仍然在;<br>.h</p><pre><code>#include &lt;QSystemTrayIcon&gt;//任务栏类#include &lt;QMenu&gt;//菜单类private:    QSystemTrayIcon* my_tray_icon;    QMenu* my_menu;    QAction* restore_winaction;    QAction* quit_action;    void create_menu();private slots:    void show_normal();</code></pre><p>.c</p><pre><code>//创建菜单    create_menu();    //判断系统是否支持托盘图标    if (!QSystemTrayIcon::isSystemTrayAvailable())    {        return;    }    //实例QSystemTrayIcon    my_tray_icon = new QSystemTrayIcon(this);    //设置图标    my_tray_icon-&gt;setIcon(QIcon(&quot;:/Test/7.png&quot;));    //鼠标放托盘图标提示信息    my_tray_icon-&gt;setToolTip(&quot;test软件&quot;);    //设置消息    my_tray_icon-&gt;showMessage(&quot;托盘&quot;, &quot;托盘管理&quot;, QSystemTrayIcon::Information, 10000);    //托盘菜单    my_tray_icon-&gt;setContextMenu(my_menu);    //显示    my_tray_icon-&gt;show();void Test::create_menu(){    restore_winaction = new QAction(&quot;恢复(&amp;R)&quot;, this);    quit_action = new QAction(&quot;退出(&amp;Q)&quot;, this);    //恢复    connect(restore_winaction, SIGNAL(triggered()), this, SLOT(show_normal()));    //退出    connect(quit_action, SIGNAL(triggered()), qApp, SLOT(quit()));    my_menu = new QMenu((QWidget*)QApplication::desktop());    //添加菜单    my_menu-&gt;addAction(restore_winaction);    //分隔符    my_menu-&gt;addSeparator();    my_menu-&gt;addAction(quit_action);}//正常显示void Test::show_normal(){    this-&gt;show();}//重写点击最小化按钮隐藏界面void QWidget::changeEvent(QEvent* e){    if ((e-&gt;type() == QEvent::WindowStateChange) &amp;&amp; this-&gt;isMaximized())    {        //定时器触发        //QTimer::singleShot(100, this, SLOT(hide()));        this-&gt;hide();    }}//重写点击关闭按钮void QWidget::closeEvent(QCloseEvent* e){    hide();    e-&gt;ignore();}</code></pre><p><img src="/2020/06/22/qt-ji-ben-kong-jian-shi-yong/16.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT基本控件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt移动无边框窗体和切换窗口</title>
      <link href="/2020/06/22/qt-yi-dong-wu-bian-kuang-chuang-ti-he-qie-huan-chuang-kou/"/>
      <url>/2020/06/22/qt-yi-dong-wu-bian-kuang-chuang-ti-he-qie-huan-chuang-kou/</url>
      
        <content type="html"><![CDATA[<p>个人博客地址:<a href="http://wtqdreamer.top">http://wtqdreamer.top</a></p><h2 id="新建窗体"><a href="#新建窗体" class="headerlink" title="新建窗体"></a>新建窗体</h2><p>新建两个窗体，一个主窗体QMainWindow一个QWidget窗体，之后在主窗体中添加隐藏标题栏以及关闭按钮。</p><pre><code>//设置标题名    this-&gt;setWindowTitle(&quot;移动无边框窗体&quot;);    //去掉标题栏    this-&gt;setWindowFlags(Qt::FramelessWindowHint);    //代码添加一个关闭按钮当然也可以ui界面添加    btClose = new QPushButton(this);    //按钮显示值    btClose-&gt;setText(&quot;关闭&quot;);    //按钮显示位置（x,y,width,heigth）    btClose-&gt;setGeometry(QRect(170, 50, 100, 25));    //按钮点击事件    connect(btClose, SIGNAL(clicked()), this, SLOT(close()));</code></pre><p>之后因为标题栏已经隐藏所以想要移动窗体就无法通过拖动标题栏来实现<br>通过重写鼠标事件来实现窗体拖动,在move_window.h中加入</p><pre><code>#include&lt;QMouseEvent&gt;#include&lt;QPushButton&gt;//定义鼠标的三种状态protected:    //鼠标按下    void mousePressEvent(QMouseEvent* e);    //鼠标移动    void mouseMoveEvent(QMouseEvent* e);    //鼠标释放    void mouseReleaseEvent(QMouseEvent* e);//定义QPint对象private:QPoint last;</code></pre><p>move_window.c中重写鼠标事件</p><pre><code>//获取鼠标点定位窗体位置void move_window::mousePressEvent(QMouseEvent* e){    last = e-&gt;globalPos();}void move_window::mouseMoveEvent(QMouseEvent* e){    //globalX()、globalY()获取屏幕坐标last.x()、last.y()获取窗体坐标    int dx = e-&gt;globalX() - last.x();    int dy = e-&gt;globalY() - last.y();    last = e-&gt;globalPos();    //    move(x() + dx, y() + dy);}void move_window::mouseReleaseEvent(QMouseEvent* e){    int dx = e-&gt;globalX() - last.x();    int dy = e-&gt;globalY() - last.y();    move(x() + dx, y() + dy);}</code></pre><p>添加切换第二窗口按钮，并实现切换窗口。在move_window.h中添加引用第二窗口类及相关槽函数</p><pre><code>#include&quot;Qsignin.h&quot;//第二窗口private:    QPushButton* btTab;    Qsignin  w2;private slots:    void show_window2();</code></pre><p>在move_window.c中添加按钮及函数设置</p><pre><code>    btTab = new QPushButton(this);    btTab-&gt;setText(&quot;第二窗口&quot;);    btTab-&gt;setGeometry(QRect(50, 50, 100, 25));    connect(btTab, SIGNAL(clicked()), this, SLOT(show_window2()));</code></pre><pre><code>void move_window::show_window2(){    w2.show();}</code></pre><p>最后实现<br><img src="/2020/06/22/qt-yi-dong-wu-bian-kuang-chuang-ti-he-qie-huan-chuang-kou/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT窗体移动 </tag>
            
            <tag> QT窗口切换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt在vs2019中使用</title>
      <link href="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/"/>
      <url>/2020/06/09/qt-zai-vs2019-zhong-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>个人博客地址:<a href="http://wtqdreamer.top">传送门</a></p><h2 id="下载对应Qt扩展"><a href="#下载对应Qt扩展" class="headerlink" title="下载对应Qt扩展"></a>下载对应Qt扩展</h2><h3 id="在vs2019中搜索下载qt-vs-tools"><a href="#在vs2019中搜索下载qt-vs-tools" class="headerlink" title="在vs2019中搜索下载qt vs tools"></a>在vs2019中搜索下载qt vs tools</h3><p><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/1.png" alt><br>如图所示下载后会自动安装，完成后重启在进行下一步设置。<br>如果下载卡住或者太慢可以采用网站下载。</p><h3 id="在visual-studio网站中下载"><a href="#在visual-studio网站中下载" class="headerlink" title="在visual studio网站中下载"></a>在visual studio网站中下载</h3><p><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/2.png" alt><br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/3.png" alt><br>如图下载后关闭所有有关vs2109程序，然后如正常安装软件双击运行就行。</p><h3 id="在Qt网站中下载对应扩展addin"><a href="#在Qt网站中下载对应扩展addin" class="headerlink" title="在Qt网站中下载对应扩展addin"></a>在Qt网站中下载对应扩展addin</h3><p>网站：<a href="https://download.qt.io/official_releases/vsaddin/" target="_blank" rel="noopener">https://download.qt.io/official_releases/vsaddin/</a><br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/4.png" alt><br>选择一个版本就行，一般最新的就可以<br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/5.png" alt><br>如图下载后关闭所有有关vs2109程序，然后如正常安装软件双击运行就行</p><h2 id="安装扩展时出现的问题"><a href="#安装扩展时出现的问题" class="headerlink" title="安装扩展时出现的问题"></a>安装扩展时出现的问题</h2><p>查看安装失败时，一定要确认已经安装好Qt与vs2019<br>如果安装时出现双击扩展安装没有反应，打开Visual Studio Installer<br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/6.png" alt><br>一定要确保如果你使用更新一定要保证新的vs版本下载并安装完毕，如图，当然如果不是最新版本也可以，只要保证不是正在下载就行。</p><h2 id="vs2019中qt设置"><a href="#vs2019中qt设置" class="headerlink" title="vs2019中qt设置"></a>vs2019中qt设置</h2><p>当你安装成功扩展就会发现扩展中已经出现qt vs tool 了<br>之后进入设置<br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/7.png" alt><br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/8.png" alt><br>如图选择你使用的编译环境文件夹点击确定，然后OK,之后你会发现<br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/9.png" alt><br>点击ok<br>之后重启vs2019就可以了在新建项目中看到Qt了。如图<br><img src="/2020/06/09/qt-zai-vs2019-zhong-shi-yong/10.png" alt><br>就跟qt中使用是一样的了。</p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs2019使用qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT窗体基类</title>
      <link href="/2020/06/02/qt-chuang-ti-ji-lei/"/>
      <url>/2020/06/02/qt-chuang-ti-ji-lei/</url>
      
        <content type="html"><![CDATA[<p>个人博客地址:<a href="http://wtqdreamer.top">http://wtqdreamer.top</a></p><h2 id="qt窗体"><a href="#qt窗体" class="headerlink" title="qt窗体"></a>qt窗体</h2><p>  qt中提供三种窗体基类，分别为QMainWindow、QWidget、QDialog根据界面开发功能的不同使用不同的窗体。<br>  1、QMainWindow<br>  QMainWindow 类提供一个有菜单条、锚接窗口（例如工具条）和一个状态条的主应用<br>程序窗口。主窗口通常用在提供一个大的中央窗口部件（例如文本编辑或者绘制画布）以及<br>周 围 菜单、工具条和一个状态条。QMainWindow 常常被继承，因为这使得封装中央部件、菜<br>单和工具条以及窗口状态条变得更容易，当用户点击菜单项或者工 具条按钮时，槽会被调<br>用。<br>  2、QWidget<br>  QWidgt 类是所有用户界面对象的基类。 窗口部件是用户界面的一个基本单元：它从窗<br>口系统接收鼠标、键盘和其它事件，并且在屏幕上绘制自己。每一个窗口部件都是矩形的，<br>并且它们按 Z 轴顺序排列。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住<br>一部分。<br>  2、QDialog<br>  QDialog 类是对话框窗口的基类。对话框窗口是主要用于短期任务以及和用户进行简要<br>通讯的顶级窗口。QDialog 可以是模态对话框也可以是非模态对话框。QDialog 支持扩展性并<br>且可以提供返回值。它们可以有默认按钮。</p><h3 id="根据QMainWindow测试窗体基本应用"><a href="#根据QMainWindow测试窗体基本应用" class="headerlink" title="根据QMainWindow测试窗体基本应用"></a>根据QMainWindow测试窗体基本应用</h3><h4 id="设置窗体名字及大小"><a href="#设置窗体名字及大小" class="headerlink" title="设置窗体名字及大小"></a>设置窗体名字及大小</h4><pre><code>    //设置窗体名字    this-&gt;setWindowTitle(&quot;测试窗体&quot;);    //设置窗体最大尺寸    this-&gt;setMaximumSize(500,500);    //设置窗体最小尺寸    this-&gt;setMinimumSize(100,100);</code></pre><h4 id="设置窗体位置及颜色"><a href="#设置窗体位置及颜色" class="headerlink" title="设置窗体位置及颜色"></a>设置窗体位置及颜色</h4><p>控制窗体在屏幕的左上角开始数X 轴 50，Y 轴 50 显示。<br>背景色为绿色</p><pre><code>//默认窗体居中显示，如果想要改变则    this-&gt;move(50,50);    //设置显示颜色    this-&gt;setStyleSheet(&quot;background: green&quot;);</code></pre><h4 id="设置窗体标题栏图标"><a href="#设置窗体标题栏图标" class="headerlink" title="设置窗体标题栏图标"></a>设置窗体标题栏图标</h4><p>要实现修改标题栏图标功能，首先需要有一个图片，最好是 16x16 像素的 ICO 图片。<br>首先右键点击当前项目添加新文件，选择：Qt-&gt;Qt Resource File添加取名字默认即可。<br>添加前缀，添加图片</p><pre><code> //修改标题栏图标    this-&gt;setWindowIcon(QIcon(&quot;:/ico/ico.png&quot;));</code></pre><p>效果如图:<br><img src="/2020/06/02/qt-chuang-ti-ji-lei/1.png" alt></p><h4 id="去掉最大化、最小化且关闭按钮失效"><a href="#去掉最大化、最小化且关闭按钮失效" class="headerlink" title="去掉最大化、最小化且关闭按钮失效"></a>去掉最大化、最小化且关闭按钮失效</h4><pre><code> //去掉最大化、最小化且关闭按钮失效    this-&gt;setWindowFlags(Qt::WindowMaximizeButtonHint);    //去掉最大化、最小化按钮且关闭按钮有效     this-&gt;setWindowFlags(Qt::WindowCloseButtonHint);</code></pre><h4 id="去掉标题栏"><a href="#去掉标题栏" class="headerlink" title="去掉标题栏"></a>去掉标题栏</h4><pre><code>    //去掉标题栏    this-&gt;setWindowFlags(Qt::FramelessWindowHint);</code></pre>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 窗体基类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客如何让百度收录</title>
      <link href="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/"/>
      <url>/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/</url>
      
        <content type="html"><![CDATA[<p>我的个人博客：<a href="http://wtqdreamer.top">传送门</a></p><h2 id="提交网址"><a href="#提交网址" class="headerlink" title="提交网址"></a>提交网址</h2><p><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/1.png" alt><br>然后进入百度站长平台，登陆后选择用户中心-站点管理-添加网站<br>根据提示进行就行<br>最后一步验证网址时选择CNAME验证最简单根据提示，在阿里云域名解析添加一条记录就行。<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/2.png" alt><br>如图根据提示添加就行<br>就这么简单,验证就完成了.<br>接下来我们需要生成网站地图sitemap,使用sitemap方式向百度提交我们的网址<br>需要在博客根目录打开git bash下安装sitemap插件</p><pre><code>npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save</code></pre><p>分别运行就行，如果出现warning不用管<br>修改博客配置文件_config.yml中<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/3.png" alt><br>修改为你自己的网址就行<br>之后使用git bash运行 hexo cl &amp;&amp; hexo g<br>hexo d<br>之后你会发现在<br>在博客目录下public下多出了baidusitemap.xml、sitemap.xml文件<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/4.png" alt><br>之后进入百度站点管理-站点属性-普通收录–sitemap<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/5.png" alt><br>如图换成你自己的域名提交就行<br>之后就是漫长的等待可能得一两个星期<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-ru-he-rang-bai-du-shou-lu/6.png" alt><br>等待。。。之后应该就可以搜到你的博客了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度收录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客绑定自己的域名</title>
      <link href="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/"/>
      <url>/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/</url>
      
        <content type="html"><![CDATA[<p>我的个人博客：<a href="http://wtqdreamer.top">传送门</a></p><h2 id="申请个人域名"><a href="#申请个人域名" class="headerlink" title="申请个人域名"></a>申请个人域名</h2><p>申请域名有很多渠道，主要有<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云万网</a>、<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>、<a href="http://www.xinnet.com/domain/domain.html" target="_blank" rel="noopener">新网</a><br>去这些网站注册一个自己喜欢的域名。<br>我这里以阿里云为例。<br>注册阿里云账号之后可以先弄实名认证、邮箱验证等东西，因为购买域名之后也需要做这些东西购买完域名之后，进入域名管理你就能看到自己的域名了。<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/1.png" alt></p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>首先获取自己github的二级域名，一般为你的github用户名.github.io<br>在windows下，win+R运行cmd ping 自己的二级域名如:<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/2.png" alt><br>记录自己ip,在这里我的ip是:185.199.108.153<br>然后进入阿里云控制台，进入域名解析<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/3.png" alt><br>点击添加记录<br>可以点击这里<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/4.png" alt><br>根据提示进行填写<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/5.png" alt><br>这是我的设置可以按这个设置。</p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>解析域名的CNAME记录到你的Git二级域名，不要使用方法一中的A记录，因为ip地址可能会一段时间之后会改变，所以建议记录类型选择CNAME进行解析<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/6.png" alt><br>如图记录值就是你的二级域名github账户名.github.io</p><h2 id="设置CANME"><a href="#设置CANME" class="headerlink" title="设置CANME"></a>设置CANME</h2><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：<br>wtqdreamer.top</p><p><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/10.png" alt></p><p><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/11.png" alt></p><p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。<br>如图：<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/7.png" alt><br>好了，接下来就可以通过你的域名访问你的博客了。<br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/8.png" alt><br><img src="/2020/05/25/hexo-ge-ren-bo-ke-bang-ding-zi-ji-de-yu-ming/9.png" alt><br>成功。。。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绑定域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客更换主题</title>
      <link href="/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/"/>
      <url>/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/</url>
      
        <content type="html"><![CDATA[<p>我的个人博客：<a href="http://wtqdreamer.top">传送门</a></p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>去github查找比较好看的主题，推荐两个如我目前在用的一个<br>hexo-theme-matery：(<a href="https://github.com/FiveWTQ/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/FiveWTQ/hexo-theme-matery.git</a>)<br><a href="http://wtqdreamer.top">点我查看</a><br>还有另一个我感觉不错的<br>hexo-theme-yelee：(<a href="https://github.com/FiveWTQ/hexo-theme-yelee.git" target="_blank" rel="noopener">https://github.com/FiveWTQ/hexo-theme-yelee.git</a>)<br><a href="http://moxfive.xyz/" target="_blank" rel="noopener">点我查看</a></p><h2 id="clone到本地"><a href="#clone到本地" class="headerlink" title="clone到本地"></a>clone到本地</h2><p>找到你想要的主题后使用git<br>如下换成你想要主题地址运行 </p><pre><code>git clone https://github.com/FiveWTQ/hexo-theme-matery.git</code></pre><h2 id="如何获取主题地址"><a href="#如何获取主题地址" class="headerlink" title="如何获取主题地址"></a>如何获取主题地址</h2><p>如图复制就行<br><img src="/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/1.PNG" alt></p><h2 id="如何替换为你需要的主题"><a href="#如何替换为你需要的主题" class="headerlink" title="如何替换为你需要的主题"></a>如何替换为你需要的主题</h2><p>复制你clone下来的主题，找到博客根目录下themes文件夹，放到它的下面<br>如图：<br><img src="/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/2.PNG" alt><br>然后打开博客配置文件_config.yml找到如下图的地方修改为你所下的那个主题名称<br><img src="/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/3.PNG" alt><br>之后包括如图的title、author、language等都可以修改为你需要的，语言你要保证你所换的主题中有这种语言包，具体可以去主题文件中查看。<br><img src="/2020/05/24/hexo-ge-ren-bo-ke-geng-huan-zhu-ti/4.PNG" alt><br>如果你想要修改主题的话，首先要查看你所clone主题的说明，README.md中有部分主题设置，主要在主题文件下的_config.yml中一般都有注释，根据需要进行修改，包括图片、网址等。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo更换主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo发布博客</title>
      <link href="/2020/05/24/hexo-fa-bu-bo-ke/"/>
      <url>/2020/05/24/hexo-fa-bu-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>我的个人博客：<a href="http://wtqdreamer.top">传送门</a></p><h2 id="如何新建博客"><a href="#如何新建博客" class="headerlink" title="如何新建博客"></a>如何新建博客</h2><p>首先你需要一款md文件的编辑器，在这里推荐一款Typora专门编辑md文件的编辑器免费而且功能齐全。页面简洁，各种功能及其友好<a href="https://typora.io/#windows" target="_blank" rel="noopener">点我下载</a>。<br>在博客根目录，右键打开git bash<br>首先检查一下你有没有安装这个扩展</p><pre><code>npm i hexo-deployer-git</code></pre><p>没有安装就安装一下<br>之后输入hexo new post “新建博客文章名”<br>之后你就会看见source文件下_posts文件夹下多出了一个新建博客文章名.md文件<br>在这个文件中编辑博客就行<br>一般情况下你需要插入图片的话需要一个文件夹存放文件<br>在博客配置文件_congfigl.yml中搜索post_asset_folder设置为true就可以了，再次新建</p><pre><code>hexo new post &quot;新建博客文章名&quot;</code></pre><p>你就会发现_posts文件下自动多出来一个以新建博客文章名命名的文件夹这个就是用来存放图片的</p><h2 id="如何在博客里插入图片"><a href="#如何在博客里插入图片" class="headerlink" title="如何在博客里插入图片"></a>如何在博客里插入图片</h2><pre><code>![](图片名.png/jpg)</code></pre><p>前提这个图片放在你这个以新建博客文章名命名的文件夹中</p><h2 id="如何设置新建博客格式"><a href="#如何设置新建博客格式" class="headerlink" title="如何设置新建博客格式"></a>如何设置新建博客格式</h2><p>刚开始你新建博客时发现hexo new post  “文章名”<br>的时候，只有title和date，以及tag这三个默认值，可是笔者经常写一些其他的值，如果每次都要添加一遍会很麻烦，那么如何添加这些默认值进去呢？<br>我们来到hexo的根目录下的scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。<br>比如你想对文章添加默认值，那么打开post.md进去添加即可，如果是对页面进行添加，那么进入page.md修改即可。<br>如图：<br><img src="/2020/05/24/hexo-fa-bu-bo-ke/1.PNG" alt><br>等你写好文章之后<br>依次运行</p><pre><code>hexo cleanhexo g</code></pre><p>之后运行</p><pre><code>hexo s</code></pre><p>本地查看一下博客文章有没有格式错误预览一下<br>没有错误，运行上传</p><pre><code>hexo d</code></pre><p>同样如果你感觉没啥问题，想比较简单一些，可以运行</p><pre><code>hexo cl &amp;&amp; hexo g -d &amp;&amp; hexo s</code></pre><p>一键实现以上步骤。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 发布博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用安装插件</title>
      <link href="/2020/05/24/hexo-chang-yong-an-zhuang-cha-jian/"/>
      <url>/2020/05/24/hexo-chang-yong-an-zhuang-cha-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="代码突出显示"><a href="#代码突出显示" class="headerlink" title="代码突出显示"></a>代码突出显示</h2><p>Hexo主题使用Hexo的插件hexo-prism-plugin而不是其自己的主题来显示代码突出显示。安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，在Hexo根文件夹的文件中修改highlight.enableto 的值，并添加插件的配置，如下所示：false_config.ymlprism</p><pre><code>highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>该主题使用Hexo插件hexo-generator-search搜索内容，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>_config.yml在Hexo根文件夹中添加文件配置，如下所示：</p><pre><code>search:  path: search.xml  field: post</code></pre><h2 id="将中文链接翻译成拼音"><a href="#将中文链接翻译成拼音" class="headerlink" title="将中文链接翻译成拼音"></a>将中文链接翻译成拼音</h2><p>如果您的体育馆标题是中文，则Hexo的Defualt永久链接将包括中文。但这不利于SEO，gitment注释也不支持中文链接。生成帖子时，我们可以使用Hexo插件的hexo-permalink-pinyin来生成中文拼音的永久链接。<br>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在_config.ymlHexo文件中添加以下配置：</p><pre><code>permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre><h2 id="发布字数统计插件"><a href="#发布字数统计插件" class="headerlink" title="发布字数统计插件"></a>发布字数统计插件</h2><p>如果要在帖子详细信息页面上显示帖子数和阅读时间信息，则可以安装hexo-wordcount插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需激活主题_config.yml文件中的以下配置项</p><pre><code>postInfo:  date: true  update: false  wordCount: false # set true.  totalCount: false # set true.  min2read: false # set true.  readCount: false # set true.</code></pre><h2 id="添加RSS-feed支持"><a href="#添加RSS-feed支持" class="headerlink" title="添加RSS feed支持"></a>添加RSS feed支持</h2><p>该主题使用Hexo插件hexo-generator-feed支持RSSfeed，并且Installation命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>_config.yml在Hexo根文件夹中添加文件配置，如下所示：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date</code></pre><p>执行hexo clean &amp;&amp; hexo g以重新生成博客文件，然后您可以在atom.xml文件public夹中看到该文件，表明您已成功安装。</p><h2 id="一般就用的"><a href="#一般就用的" class="headerlink" title="一般就用的"></a>一般就用的</h2><pre><code>npm installnpm install hexo-deployer-git --save  // 文章部署到 git 的模块（下面为选择安装）npm install hexo-generator-feed --save  // 建立 RSS 订阅npm install hexo-generator-sitemap --save // 建立站点地图</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2020/05/24/ge-ren-bo-ke-da-jian/"/>
      <url>/2020/05/24/ge-ren-bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>搭建一个属于自己的个人博客<br>搭建方式为hexo+github的方式<br>即使小白也可以快速实现</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们准备安装3个软件<br>    git for windows:<a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载</a><br>    nodejs:<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载</a><br>    sublime Text3:<a href="https://www.sublimetextcn.com/" target="_blank" rel="noopener">下载</a>或者有其他代码编辑器也行<br>    如:Notepad++都可以<br>    安装的时候按默认的安装就行不需要特别选择什么。</p><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><p>因为我们的博客是运行挂载在github上的所以首先我们要注册github账户<a href="https://github.com/" target="_blank" rel="noopener">github</a><br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/github%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2.PNG" alt><br>之后根据提示进行注册就行，等到了选择免费还是收费时选择免费版的就行。<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/1.PNG" alt><br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/2.PNG" alt><br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/3.PNG" alt><br>之后创建仓库就行<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/4.PNG" alt><br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/5.PNG" alt><br>至于内容可以随意，由于是第一次使用可以编辑为</p><pre class=" language-bush"><code class="language-bush">Hello World!</code></pre><p>之后等待1-2分钟，就可以打开网址你的用户名+github.io进去看看是否生成了你的网站，是不是显示你刚刚所写的Hello World!。<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/6.PNG" alt><br>之后你可以在setting中设置你的网站的一些东西<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/7.PNG" alt><br>这个就是你的网站地址，如果以上你的网站没有成功<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/8.PNG" alt><br>在setting里面找到这个设置一下就好了。<br>等到你测试成功，这一步就算完成了</p><h2 id="博客文件创建"><a href="#博客文件创建" class="headerlink" title="博客文件创建"></a>博客文件创建</h2><p>接下来你需要在你本地电脑上创建个博客文件夹，并把它与你的网站连接起来。<br>首先你要选择一个你放博客文件的盘如F盘<br>在F盘新建个文件夹如命名为：blog<br>之后打开cmd<br>cd F:盘你创建的文件<br>先在cmd中按shift+F+:<br>进入F:<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/9.PNG" alt><br>之后<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/10.PNG" alt><br>之后你需要输入如下代码:</p><pre class=" language-bush"><code class="language-bush">install hexo-cli -ghexo init xxxblog</code></pre><p>其中xxx为你的用户名如：FiveWTQblog<br>执行完成之后接着<br>cd xxxblog<br>安装依赖,依次输入</p><pre class=" language-bush"><code class="language-bush">npm installnpm install hexo-deployer-git --save</code></pre><p>之后输入 </p><pre class=" language-bush"><code class="language-bush">hexo s</code></pre><p><img src="/2020/05/24/ge-ren-bo-ke-da-jian/11.PNG" alt><br>复制到浏览器地址就可以看到博客默认面板，不要使用ctrl+c复制，那样会退出。<br>如果可以看到博客基本页面那就说明已经初步成功了。</p><hr><h2 id="github中SSH生成及设置"><a href="#github中SSH生成及设置" class="headerlink" title="github中SSH生成及设置"></a>github中SSH生成及设置</h2><p>进入你的github头像下拉可以看到settting 进入后左边可以看到SSH and GPG keys 如果有的话就不用再添加了，没有的话新建一个。<br>打开git bash<br>依次输入<br>git config –global user.name “xxx”<br>xxx是 = 你注冊github時的用戶名<br>git config –global user.email “邮箱地址”<br>邮箱地址为你的github绑定的邮箱<br>ssh-keygen -t rsa -C  “邮箱地址”<br>邮箱地址同样也是你github邮箱<br>之后需要你输入你的github账户密码两次，不会显示你输入字符，所以不要输错<br>之后就生成了SSH了</p><hr><p>在C盘用户下会有一个.ssh文件夹<br>打开id_rsa.pub文件打开后复制里边所有字符<br>在你的github账户下新建SSH粘贴进去就行了<br>之后这一步就算完成了。</p><hr><p>接着使用代码编辑器打开xxxblog文件夹下的_confing.yml文件<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/12.PNG" alt><br>把这个修改为你自己的地址<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/13.PNG" alt><br>这个就是你自己的地址了<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/14.PNG" alt><br>将这个url改成你的网址地址<br>之后在你的xxxblog文件中右键打开git bash分别执行以下命令<br>hexo clean//清理缓存<br>hexo g //部署<br>hexo d//上传<br>可能需要输入github账户密码正常输入就行<br>最后本地端口试运行一下<br>git bash中输入hexo s<br><img src="/2020/05/24/ge-ren-bo-ke-da-jian/15.PNG" alt><br>输入到浏览器看看有没有成功<br>以上命令还可以这样输入 hexo cl &amp;&amp; hexo g -d &amp;&amp; hexo s<br>没有跳出红色命令就是成功了<br>好了这个简单的博客模板就成功了<br>之后会写怎么写博客，以及更换别人设计好的比较漂亮的主题</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/17/hello-world/"/>
      <url>/2020/05/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
